<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC	"-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper 태그 안에 작성하기 -->
<mapper namespace="com.spring.madi.BoardMapper">
	<resultMap type="BoardVO" id="BoardResultMap">
		<result property="board_num" column="BOARD_NUM"/>
		<result property="user_id" column="USER_ID" />
		<result property="board_title" column="BOARD_TITLE" />
		<result property="board_summry" column="BOARD_SUMMRY" />
		<result property="board_img" column="BOARD_IMG" />
		<result property="board_recipe_id" column="BOARD_RECIPE_ID" />
		<result property="board_like" column="BOARD_LIKE" />
		<result property="board_time" column="BOARD_TIME" />
		<!-- (진산) 본문 글쓴이의 프로필 이미지를 위해 넣음 -->
		<result property="user_img" column="USER_IMG" />
		<!-- (성빈) board_num을 기준으로 Board의 모든 댓글 정보를 List에 담아 boardReplyList 필드로 리턴하는 collection 설정-->
		<collection property="boardReplyList" column="board_num" javaType="java.util.ArrayList" ofType="com.spring.madi.BoardReplyVO" select="getReplyListByBoardNum"/>
		<!-- (성빈) 자신과 팔로잉한 사람들 모두의 게시글을 불러온다 
		<collection property="getAllboards" column="user_id" javaType="java.util.ArrayList" ofType="com.spring.madi.BoardVO" select="getAllBoardsByUser_id"/> -->
	</resultMap>
	
	<resultMap type="BoardReplyVO" id="BoardReplyResultMap">
		<result property="board_num" column="BOARD_NUM"/>
		<result property="user_id" column="USER_ID" />
		<!-- (진산) 본문 댓글의 프로필 이미지를 위해 넣음 -->
		<result property="user_img" column="USER_IMG" />
		<result property="rep_content" column="REP_CONTENT" />
		<result property="rep_date" column="REP_DATE" />
	</resultMap>
	
	<resultMap type="UserLikeBoVO" id="UserLikeBoResultMap">
		<result property="user_id" column="USER_ID" />
		<result property="board_num" column="BOARD_NUM"/>
	</resultMap>	

	<!-- 댓글에 입력하면 DB에 저장 -->
	<insert id="writeBoard" parameterType="BoardReplyVO">
		INSERT INTO BOARD_REPLY (BOARD_NUM, USER_ID, REP_CONTENT, USER_IMG) 
		VALUES (#{board_num}, #{user_id}, #{rep_content}, #{user_img})	
	</insert>
	<!-- DB저장 내용 뽑아서 뿌려줌 -->
	<select id="getBoard" resultMap="BoardReplyResultMap" parameterType="com.spring.madi.BoardReplyVO">
		SELECT USER_ID, USER_IMG, REP_CONTENT, REP_DATE
		FROM BOARD_REPLY
		WHERE BOARD_NUM = #{board_num}
		ORDER BY REP_DATE DESC
	</select>
	<!-- 성빈 : recipe_id와 연결된 Board 정보 조회 -->
	<select id="getBoardByRecipeId" resultMap="BoardResultMap" parameterType="com.spring.madi.RecipeVO">
		SELECT *
		FROM BOARD
		WHERE BOARD_RECIPE_ID = #{recipe_id}
	</select>
	<!-- 성빈 : board_num과 연결된 Reply 리스트 조회 -->
	<select id="getReplyByBoardNum" resultMap="BoardReplyResultMap" parameterType="com.spring.madi.BoardVO">
		SELECT USER_ID, USER_IMG, REP_CONTENT , REP_DATE
		FROM BOARD_REPLY
		WHERE BOARD_NUM = #{board_num}
		ORDER BY REP_DATE DESC
	</select>
	<!-- 인욱: recipe_id 에 따른 보드내용 뽑아옴 -->
	<select id="contentBoard" resultMap="BoardReplyResultMap" parameterType="com.spring.madi.BoardReplyVO">
		select c.board_num,c.USER_ID,c.REP_CONTENT,c.REP_DATE, d.recipe_id 
		from board_reply c,(select a.board_num, b.recipe_id from board a, recipe_info b where a.board_recipe_id = b.recipe_id) d 
		where c.board_num = d.board_num 
		and recipe_id=466 order by rep_date
		</select>
	<insert id="insertBoard" parameterType="com.spring.madi.RecipeVO">
		<selectKey resultType="int" keyProperty="recipe_id" order="BEFORE">
			SELECT MAX(RECIPE_ID) FROM RECIPE_INFO
		</selectKey>
		INSERT INTO BOARD (BOARD_NUM, USER_ID, BOARD_TITLE, BOARD_SUMMRY, BOARD_IMG, BOARD_RECIPE_ID, BOARD_LIKE, BOARD_TIME)
		VALUES (#{recipe_id}, #{user_id, jdbcType=VARCHAR}, #{recipe_title}, #{recipe_desc}, #{img_url}, #{recipe_id}, 0, SYSDATE)
	</insert>

	
	<!-- <select id="boardList" resultMap="BoardResultMap">
		SELECT * FROM BOARD;
	</select> -->
	
<!-- 	<Select id="boardList" resultMap="BoardResultMap">
		select board_recipe_id, board_img
		from board
		union
		select recipe_id, img_url
		from recipe_info;
	</Select> -->

	<!-- (진산)게시글 목록 구하기 -->
	<select id="getBoards" resultMap="BoardResultMap" parameterType="String">
	<!--SELECT a.board_num, a.user_id, c.user_img, a.board_title, a.board_summry, 
		a.board_img, a.board_recipe_id, a.board_like, a.board_time, b.rep_content
		FROM board a, board_reply b, member c 
		WHERE a.user_id = b_user_id and a.user_id = c.user_id and user_id= #{user_id, javaType=String} -->
		SELECT * FROM board WHERE user_id= #{user_id, javaType=String}
	</select>
	<!-- (진산) 임시..연월일만 구하기 -->
	<select id="getTime" resultMap="BoardResultMap">
		SELECT TO_CHAR(board_time, 'YYYY.MM.DD')
		FROM board WHERE user_id= #{user_id, javaType=String}
	</select>
	<!-- (성빈) 댓글 구하기 -->
	<select id="getReplyListByBoardNum" resultType="com.spring.madi.BoardReplyVO">
		select * from board_reply where board_num= #{board_num} ORDER BY REP_DATE DESC
	</select>
	<!-- (진산) 본인 + 팔로잉한 사람들의 게시글 목록 구하기 -->
	<select id="getAllBoards" resultMap="BoardResultMap">	
		SELECT * FROM
		(SELECT * FROM board WHERE user_id= #{user_id, javaType=String}
		UNION
		SELECT * FROM board WHERE USER_ID in
		(SELECT following_user_id FROM member_follow WHERE user_id= #{user_id, javaType=String}))
		ORDER BY board_time desc
	</select> 
	<!-- (진산) 좋아요 버튼: 눌른 적이 있는지  user_like_bo에 체크하기 -->
	<select id="getUserLike" resultMap="UserLikeBoResultMap" parameterType="com.spring.madi.BoardVO">
		SELECT * FROM user_like_bo where user_id= #{user_id} and board_num= #{board_num}
	</select>
	<!-- (진산) 좋아요 버튼 : user_like_bo에 하나 추가하기 -->
	<insert id="insertUserLike" parameterType="com.spring.madi.UserLikeBoVO">
		INSERT INTO user_like_bo VALUES (#{user_id, javaType=String}, #{board_num})
	</insert>
	<!-- (진산) 좋아요 버튼: board에 좋아요 숫자 추가 -->
	<update id="likePlusOne" parameterType="com.spring.madi.BoardVO">
		UPDATE board SET board_like= board_like + 1 WHERE user_id= #{user_id, javaType=String} and board_num= #{board_num}
	</update>
	<!-- (진산) 좋아요 버튼: user_like_bo에 입력정보 삭제하기 -->
	<delete id="deleteUserLike" parameterType="com.spring.madi.UserLikeBoVO">
		DELETE FROM user_like_bo WHERE user_id= #{user_id, javaType=String} and board_num= #{board_num}
	</delete>
	<!-- (진산) 좋아요 버튼: board에 좋아요 숫자 지우기 -->
	<update id="likeMinusOne" parameterType="com.spring.madi.BoardVO">
		UPDATE board SET board_like= board_like - 1 WHERE user_id= #{user_id, javaType=String} and board_num= #{board_num}
	</update>
	
	<!-- (성빈) 좋아요 한 게시판인지 체크 -->
	<select id="doesAlreadyLike" parameterType="com.spring.madi.UserLikeBoVO" resultMap="UserLikeBoResultMap">
		SELECT *
		FROM USER_LIKE_BO
		WHERE USER_ID = #{user_id, jdbcType=VARCHAR} AND BOARD_NUM = #{board_num}
	</select>
	<!-- (성빈) 게시판의 좋아요 카운트 증가-->
	<update id="updateBoardLikePlus" parameterType="com.spring.madi.UserLikeBoVO">
		UPDATE BOARD
		SET BOARD_LIKE = BOARD_LIKE + 1
		WHERE BOARD_NUM = #{board_num}
	</update>
	<!-- (성빈) 게시판의 좋아요 카운트 증가-->
	<update id="updateBoardLikeMinus" parameterType="com.spring.madi.UserLikeBoVO">
		UPDATE BOARD
		SET BOARD_LIKE = BOARD_LIKE - 1
		WHERE BOARD_NUM = #{board_num}
	</update>
	<insert id="insertUserLikeBo" parameterType="com.spring.madi.UserLikeBoVO">
		INSERT INTO USER_LIKE_BO(USER_ID, BOARD_NUM)
		VALUES(#{user_id, jdbcType=VARCHAR}, #{board_num})
	</insert>
	<delete id="deleteUserLikeBo" parameterType="com.spring.madi.UserLikeBoVO">
		DELETE FROM USER_LIKE_BO
		WHERE USER_ID = #{user_id, jdbcType=VARCHAR} AND BOARD_NUM = #{board_num}
	</delete>
	<delete id="deleteReply" parameterType="com.spring.madi.BoardReplyVO">
		DELETE FROM BOARD_REPLY
		WHERE USER_ID = #{user_id} AND REP_DATE = #{rep_date}
	</delete>
</mapper>